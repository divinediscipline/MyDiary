{"version":3,"sources":["../../../../server/tests/routes/entries/addEntry.test.js"],"names":["beforeEach","done","entries","length","describe","it","testEntry","title","description","app","post","send","expect","res","body","newEntry","to","include","entryId","deep","equal","end","err","push"],"mappings":";;AAAA;;;;AACA;;AAEA;;;;AACA;;;;;;AACA;;AAEAA,WAAW,UAACC,IAAD,EAAU;AACnBC,wBAAQC,MAAR,GAAiB,CAAjB;AACAF;AACD,CAHD;;AAKAG,SAAS,OAAT,EAAkB,YAAM;AACtBC,KAAG,2BAAH,EAAgC,UAACJ,IAAD,EAAU;AACxC,QAAMK,YAAY;AAChBC,aAAO,gBADS;AAEhBC,mBAAa;AAFG,KAAlB;;AAKA,6BAAQC,aAAR,EACGC,IADH,CACQ,iBADR,EAEGC,IAFH,CAEQ;AACJJ,aAAO,gBADH;AAEJC,mBAAa;AAFT,KAFR,EAMGI,MANH,CAMU,GANV,EAOGA,MAPH,CAOU,UAACC,GAAD,EAAS;AACf,wBAAOA,IAAIC,IAAJ,CAASC,QAAhB,EAA0BC,EAA1B,CAA6BC,OAA7B,CAAqC,EAAEC,SAAS,CAAX,EAArC;AACA,wBAAOL,IAAIC,IAAJ,CAASC,QAAT,CAAkBR,KAAzB,EAAgCS,EAAhC,CAAmCG,IAAnC,CAAwCC,KAAxC,CAA8Cd,UAAUC,KAAxD;AACA,wBAAOM,IAAIC,IAAJ,CAASC,QAAT,CAAkBP,WAAzB,EAAsCQ,EAAtC,CAAyCG,IAAzC,CAA8CC,KAA9C,CAAoDd,UAAUE,WAA9D;AACD,KAXH,EAYGa,GAZH,CAYO,UAACC,GAAD,EAAMT,GAAN,EAAc;AACjB,UAAIS,GAAJ,EAAS;AACP,eAAOrB,KAAKqB,GAAL,CAAP;AACD;AACD;AACA;AACD,KAlBH;;AAoBApB,0BAAQqB,IAAR,CAAajB,SAAb;AACA;AACA;;AAEA,sBAAOJ,sBAAQC,MAAf,EAAuBa,EAAvB,CAA0BI,KAA1B,CAAgC,CAAhC;AACA,sBAAOlB,sBAAQ,CAAR,EAAWK,KAAlB,EAAyBS,EAAzB,CAA4BG,IAA5B,CAAiCC,KAAjC,CAAuCd,UAAUC,KAAjD;AACA,sBAAOL,sBAAQ,CAAR,EAAWM,WAAlB,EAA+BQ,EAA/B,CAAkCG,IAAlC,CAAuCC,KAAvC,CAA6Cd,UAAUE,WAAvD;AACAP;AACD,GAlCD;;AAqCAI,KAAG,mDAAH,EAAwD,UAACJ,IAAD,EAAU;AAChE,6BAAQQ,aAAR,EACGC,IADH,CACQ,iBADR,EAEGC,IAFH,GAGGC,MAHH,CAGU,GAHV,EAIGS,GAJH,CAIO,UAACC,GAAD,EAAMT,GAAN,EAAc;AACjB,UAAIS,GAAJ,EAAS;AACP,eAAOrB,KAAKqB,GAAL,CAAP;AACD;AACF,KARH;;AAUA,sBAAOpB,sBAAQC,MAAf,EAAuBa,EAAvB,CAA0BI,KAA1B,CAAgC,CAAhC;AACAnB;AACD,GAbD;AAcD,CApDD","file":"addEntry.test.js","sourcesContent":["import request from 'supertest';\r\nimport { expect } from 'chai';\r\n\r\nimport app from '../../../src/app';\r\nimport entries from '../../../data/dataEntries';\r\n// import { error } from 'util';\r\n\r\nbeforeEach((done) => {\r\n  entries.length = 0;\r\n  done();\r\n});\r\n\r\ndescribe('/POST', () => {\r\n  it('should create a new entry', (done) => {\r\n    const testEntry = {\r\n      title: 'Work on monday',\r\n      description: 'is an audio or visual form of marketing communication that employs an openly.',\r\n    };\r\n\r\n    request(app)\r\n      .post('/api/v1/entries')\r\n      .send({\r\n        title: 'Work on monday',\r\n        description: 'is an audio or visual form of marketing communication that employs an openly.',\r\n      })\r\n      .expect(200)\r\n      .expect((res) => {\r\n        expect(res.body.newEntry).to.include({ entryId: 3 });\r\n        expect(res.body.newEntry.title).to.deep.equal(testEntry.title);\r\n        expect(res.body.newEntry.description).to.deep.equal(testEntry.description);\r\n      })\r\n      .end((err, res) => {\r\n        if (err) {\r\n          return done(err);\r\n        }\r\n        // console.log('******** for res.body.newEntry');\r\n        // console.log(res.body.newEntry);\r\n      });\r\n\r\n    entries.push(testEntry);\r\n    // console.log('******** for entries');\r\n    // console.log(entries);\r\n\r\n    expect(entries.length).to.equal(1);\r\n    expect(entries[0].title).to.deep.equal(testEntry.title);\r\n    expect(entries[0].description).to.deep.equal(testEntry.description);\r\n    done();\r\n  });\r\n\r\n\r\n  it('should not create a diary entry with invalid data', (done) => {\r\n    request(app)\r\n      .post('/api/v1/entries')\r\n      .send()\r\n      .expect(400)\r\n      .end((err, res) => {\r\n        if (err) {\r\n          return done(err);\r\n        }\r\n      });\r\n\r\n    expect(entries.length).to.equal(0);\r\n    done();\r\n  });\r\n});\r\n"]}