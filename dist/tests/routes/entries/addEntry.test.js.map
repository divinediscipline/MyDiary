{"version":3,"sources":["../../../../server/tests/routes/entries/addEntry.test.js"],"names":["describe","it","done","testEntry","entryId","title","description","createdAt","app","post","send","expect","res","body","newEntry","to","deep","equal","end","err","entries","length"],"mappings":";;AAAA;;;;AACA;;AAEA;;;;AACA;;;;;;AAEAA,SAAS,sBAAT,EAAiC,YAAM;AACrCC,KAAG,2BAAH,EAAgC,UAACC,IAAD,EAAU;AACxC,QAAMC,YAAY;AAChBC,eAAS,GADO;AAEhBC,aAAO,YAFS;AAGhBC,mBAAa,4BAHG;AAIhBC,iBAAW;AAJK,KAAlB;;AAOA,6BAAQC,aAAR,EACGC,IADH,CACQ,iBADR,EAEGC,IAFH,CAEQP,SAFR,EAGGQ,MAHH,CAGU,GAHV,EAIGA,MAJH,CAIU,UAACC,GAAD,EAAS;AACf,wBAAOA,IAAIC,IAAJ,CAASC,QAAT,CAAkBV,OAAzB,EAAkCW,EAAlC,CAAqCC,IAArC,CAA0CC,KAA1C,CAAgDd,UAAUC,OAA1D;AACA,wBAAOQ,IAAIC,IAAJ,CAASC,QAAT,CAAkBT,KAAzB,EAAgCU,EAAhC,CAAmCC,IAAnC,CAAwCC,KAAxC,CAA8Cd,UAAUE,KAAxD;AACA,wBAAOO,IAAIC,IAAJ,CAASC,QAAT,CAAkBR,WAAzB,EAAsCS,EAAtC,CAAyCC,IAAzC,CAA8CC,KAA9C,CAAoDd,UAAUG,WAA9D;AACD,KARH,EASGY,GATH,CASO,UAACC,GAAD,EAAMP,GAAN,EAAc;AACjB,UAAIO,GAAJ,EAAS;AACP,eAAOjB,KAAKiB,GAAL,CAAP;AACD;AACF,KAbH;AAcAjB;AACD,GAvBD;;AA0BAD,KAAG,mDAAH,EAAwD,UAACC,IAAD,EAAU;AAChE,6BAAQM,aAAR,EACGC,IADH,CACQ,iBADR,EAEGC,IAFH,GAGGC,MAHH,CAGU,GAHV,EAIGO,GAJH,CAIO,UAACC,GAAD,EAAMP,GAAN,EAAc;AACjB,UAAIO,GAAJ,EAAS;AACP,eAAOjB,KAAKiB,GAAL,CAAP;AACD;AACF,KARH;AASA,sBAAOC,sBAAQC,MAAf,EAAuBN,EAAvB,CAA0BE,KAA1B,CAAgC,CAAhC;AACAf;AACD,GAZD;AAaD,CAxCD","file":"addEntry.test.js","sourcesContent":["import request from 'supertest';\r\nimport { expect } from 'chai';\r\n\r\nimport app from '../../../src/app';\r\nimport entries from '../../../data/dataEntries';\r\n\r\ndescribe('POST /api/v1/entries', () => {\r\n  it('should create a new entry', (done) => {\r\n    const testEntry = {\r\n      entryId: '1',\r\n      title: 'Test title',\r\n      description: 'This is a test description',\r\n      createdAt: '20180506143490000',\r\n    };\r\n\r\n    request(app)\r\n      .post('/api/v1/entries')\r\n      .send(testEntry)\r\n      .expect(201)\r\n      .expect((res) => {\r\n        expect(res.body.newEntry.entryId).to.deep.equal(testEntry.entryId);\r\n        expect(res.body.newEntry.title).to.deep.equal(testEntry.title);\r\n        expect(res.body.newEntry.description).to.deep.equal(testEntry.description);\r\n      })\r\n      .end((err, res) => {\r\n        if (err) {\r\n          return done(err);\r\n        }\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n  it('should not create a diary entry with invalid data', (done) => {\r\n    request(app)\r\n      .post('/api/v1/entries')\r\n      .send()\r\n      .expect(400)\r\n      .end((err, res) => {\r\n        if (err) {\r\n          return done(err);\r\n        }\r\n      });\r\n    expect(entries.length).to.equal(3);\r\n    done();\r\n  });\r\n});\r\n"]}