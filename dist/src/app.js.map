{"version":3,"sources":["../../server/src/app.js"],"names":["app","use","bodyParser","json","urlencoded","extended","get","req","res","status","message","v1","entries","id","params","foundEntry","find","entry","entryId","post","body","title","description","createdAt","push","newEntry","send","put","modifiedEntry","PORT","process","env","listen","console","log"],"mappings":"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","file":"app.js","sourcesContent":["import express from 'express';\r\nimport logger from 'morgan';\r\nimport bodyParser from 'body-parser';\r\n\r\nimport entries from '../data/dataEntries';\r\n\r\n// Set up the express app\r\nconst app = express();\r\n\r\n// Log requests to the console.\r\napp.use(logger('dev'));\r\n\r\n// Parse incoming requests data (https://github.com/expressjs/body-parser)\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\n\r\napp.get('/', (req, res) => res.status(200).json({\r\n  message: 'Welcome to the myDiary API',\r\n  v1: '/api/v1',\r\n}));\r\n\r\napp.get('/v1', (req, res) => res.status(200).json({\r\n  message: 'Welcome to version 1 of the myDiary API',\r\n}));\r\n\r\n// Get all entries\r\napp.get('/api/v1/entries', (req, res) => {\r\n  res.status(200).json(\r\n    {\r\n      entries,\r\n    },\r\n  );\r\n});\r\n\r\n// Get single entry\r\napp.get('/api/v1/entries/:id', (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  const foundEntry = entries.find((entry) => {\r\n    return entry.entryId == id;\r\n  });\r\n\r\n  if (foundEntry) {\r\n    res.json(\r\n      {\r\n        foundEntry,\r\n      },\r\n    );\r\n  } else {\r\n    res.status(404).json();\r\n  }\r\n});\r\n\r\n// Create an entry\r\napp.post('/api/v1/entries', (req, res) => {\r\n  if (req.body.title && req.body.description && req.body.entryId && req.body.createdAt) {\r\n    entries.push({\r\n      entryId: req.body.entryId,\r\n      title: req.body.title,\r\n      description: req.body.description,\r\n      createdAt: req.body.createdAt,\r\n    });\r\n    res.status(201).json(\r\n      {\r\n        newEntry: {\r\n          entryId: req.body.entryId,\r\n          title: req.body.title,\r\n          description: req.body.description,\r\n          createdAt: req.body.createdAt,\r\n        },\r\n      },\r\n    );\r\n  } else {\r\n    res.status(400).send();\r\n  }\r\n});\r\n\r\n\r\n// Modify an entry\r\napp.put('/api/v1/entries/:id', (req, res) => {\r\n  if (req.body.title && req.body.description && req.body.entryId && req.body.createdAt) {\r\n    const { id } = req.params;\r\n\r\n    const foundEntry = entries.find((entry) => {\r\n      return entry.entryId == id;\r\n    });\r\n\r\n    if (foundEntry) {\r\n      res.json(\r\n        {\r\n          modifiedEntry: {\r\n            entryId: req.body.entryId,\r\n            title: req.body.title,\r\n            description: req.body.description,\r\n            createdAt: req.body.createdAt,\r\n          },\r\n        },\r\n      );\r\n    } else {\r\n      res.status(404).send();\r\n    }\r\n  } else {\r\n    res.status(400).send();\r\n  }\r\n});\r\n\r\n\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`app started on port ${PORT}`);\r\n});\r\n\r\nexport default app;\r\n"]}