{"version":3,"sources":["../../server/src/app.js"],"names":["app","use","bodyParser","json","urlencoded","extended","get","req","res","status","message","v1","send","entries","id","params","foundEntry","find","entry","entryId","post","body","title","description","push","createdAt","updatedAt","newEntry","put","modifiedEntry","port","process","env","PORT","listen","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA;AACA,IAAMA,MAAM,wBAAZ;;AAEA;AACAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAD,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;;AAGAL,IAAIM,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIC,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAC9CO,aAAS,4BADqC;AAE9CC,QAAI;AAF0C,GAArB,CAAd;AAAA,CAAb;;AAKAX,IAAIM,GAAJ,CAAQ,KAAR,EAAe,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIC,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAChDO,aAAS;AADuC,GAArB,CAAd;AAAA,CAAf;;AAIA;AACAV,IAAIM,GAAJ,CAAQ,iBAAR,EAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvCA,MAAII,IAAJ,CACE;AACEC;AADF,GADF;AAKD,CAND;;AAQA;AACAb,IAAIM,GAAJ,CAAQ,qBAAR,EAA+B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,MACnCM,EADmC,GAC5BP,IAAIQ,MADwB,CACnCD,EADmC;;;AAG3C,MAAME,aAAaH,sBAAQI,IAAR,CAAa,UAACC,KAAD,EAAW;AACzC,WAAOA,MAAMC,OAAN,IAAiBL,EAAxB;AACD,GAFkB,CAAnB;;AAIA,MAAIE,UAAJ,EAAgB;AACdR,QAAII,IAAJ,CACE;AACEI;AADF,KADF;AAKD,GAND,MAMO;AACLR,QAAIC,MAAJ,CAAW,GAAX,EAAgBG,IAAhB;AACD;AACF,CAhBD;;AAkBA;AACAZ,IAAIoB,IAAJ,CAAS,iBAAT,EAA4B,UAACb,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAID,IAAIc,IAAJ,CAASC,KAAT,IAAkBf,IAAIc,IAAJ,CAASE,WAA/B,EAA4C;AAC1CV,0BAAQW,IAAR,CAAa;AACXL,eAAS,CADE;AAEXG,aAAOf,IAAIc,IAAJ,CAASC,KAFL;AAGXC,mBAAahB,IAAIc,IAAJ,CAASE,WAHX;AAIXE,iBAAW,iBAJA;AAKXC,iBAAW;AALA,KAAb;AAOAlB,QAAII,IAAJ,CACE;AACEe,gBAAU;AACRR,iBAAS,CADD;AAERG,eAAOf,IAAIc,IAAJ,CAASC,KAFR;AAGRC,qBAAahB,IAAIc,IAAJ,CAASE,WAHd;AAIRE,mBAAW,iBAJH;AAKRC,mBAAW;AALH;AADZ,KADF;AAWD,GAnBD,MAmBO;AACLlB,QAAIC,MAAJ,CAAW,GAAX,EAAgBG,IAAhB;AACD;AACF,CAvBD;;AA0BA;AACAZ,IAAI4B,GAAJ,CAAQ,qBAAR,EAA+B,UAACrB,GAAD,EAAMC,GAAN,EAAc;AAC3C,MAAID,IAAIc,IAAJ,CAASC,KAAT,IAAkBf,IAAIc,IAAJ,CAASE,WAA/B,EAA4C;AAAA,QAClCT,EADkC,GAC3BP,IAAIQ,MADuB,CAClCD,EADkC;;;AAG1C,QAAME,aAAaH,sBAAQI,IAAR,CAAa,UAACC,KAAD,EAAW;AACzC,aAAOA,MAAMC,OAAN,IAAiBL,EAAxB;AACD,KAFkB,CAAnB;;AAIA,QAAIE,UAAJ,EAAgB;AACdR,UAAII,IAAJ,CACE;AACEiB,uBAAe;AACbV,mBAASL,EADI;AAEbQ,iBAAOf,IAAIc,IAAJ,CAASC,KAFH;AAGbC,uBAAahB,IAAIc,IAAJ,CAASE,WAHT;AAIbE,qBAAW,iBAJE;AAKbC,qBAAW;AALE;AADjB,OADF;AAWD,KAZD,MAYO;AACLlB,UAAIC,MAAJ,CAAW,GAAX,EAAgBG,IAAhB;AACD;AACF,GAtBD,MAsBO;AACLJ,QAAIC,MAAJ,CAAW,GAAX,EAAgBG,IAAhB;AACD;AACF,CA1BD;;AA6BA,IAAMkB,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEAjC,IAAIkC,MAAJ,CAAWJ,IAAX,EAAiB,YAAM;AACrBK,UAAQC,GAAR,0BAAmCN,IAAnC;AACD,CAFD;;kBAIe9B,G","file":"app.js","sourcesContent":["import express from 'express';\r\nimport logger from 'morgan';\r\nimport bodyParser from 'body-parser';\r\n\r\nimport entries from '../data/dataEntries';\r\n\r\n// Set up the express app\r\nconst app = express();\r\n\r\n// Log requests to the console.\r\napp.use(logger('dev'));\r\n\r\n// Parse incoming requests data (https://github.com/expressjs/body-parser)\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\n\r\napp.get('/', (req, res) => res.status(200).json({\r\n  message: 'Welcome to the myDiary API',\r\n  v1: '/api/v1',\r\n}));\r\n\r\napp.get('/v1', (req, res) => res.status(200).json({\r\n  message: 'Welcome to version 1 of the myDiary API',\r\n}));\r\n\r\n// Get all entries\r\napp.get('/api/v1/entries', (req, res) => {\r\n  res.send(\r\n    {\r\n      entries,\r\n    },\r\n  );\r\n});\r\n\r\n// Get single entry\r\napp.get('/api/v1/entries/:id', (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  const foundEntry = entries.find((entry) => {\r\n    return entry.entryId == id;\r\n  });\r\n\r\n  if (foundEntry) {\r\n    res.send(\r\n      {\r\n        foundEntry,\r\n      },\r\n    );\r\n  } else {\r\n    res.status(404).send();\r\n  }\r\n});\r\n\r\n// Create an entry\r\napp.post('/api/v1/entries', (req, res) => {\r\n  if (req.body.title && req.body.description) {\r\n    entries.push({\r\n      entryId: 3,\r\n      title: req.body.title,\r\n      description: req.body.description,\r\n      createdAt: 20180506143490000,\r\n      updatedAt: 20180506143490000,\r\n    });\r\n    res.send(\r\n      {\r\n        newEntry: {\r\n          entryId: 3,\r\n          title: req.body.title,\r\n          description: req.body.description,\r\n          createdAt: 20180506143490000,\r\n          updatedAt: 20180506143490000,\r\n        },\r\n      },\r\n    );\r\n  } else {\r\n    res.status(400).send();\r\n  }\r\n});\r\n\r\n\r\n// Modify an entry\r\napp.put('/api/v1/entries/:id', (req, res) => {\r\n  if (req.body.title && req.body.description) {\r\n    const { id } = req.params;\r\n\r\n    const foundEntry = entries.find((entry) => {\r\n      return entry.entryId == id;\r\n    });\r\n\r\n    if (foundEntry) {\r\n      res.send(\r\n        {\r\n          modifiedEntry: {\r\n            entryId: id,\r\n            title: req.body.title,\r\n            description: req.body.description,\r\n            createdAt: 20180506143490000,\r\n            updatedAt: 20180506143490000,\r\n          },\r\n        },\r\n      );\r\n    } else {\r\n      res.status(404).send();\r\n    }\r\n  } else {\r\n    res.status(400).send();\r\n  }\r\n});\r\n\r\n\r\nconst port = process.env.PORT || 8000;\r\n\r\napp.listen(port, () => {\r\n  console.log(`app started on port ${port}`);\r\n});\r\n\r\nexport default app;\r\n"]}